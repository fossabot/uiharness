{"version":3,"sources":["../common/constants.ts","../common/libs.ts","../common/index.ts","screens/HelloWorld.tsx","index.tsx","../../node_modules/parcel-bundler/src/builtins/bundle-url.js","../../node_modules/parcel-bundler/src/builtins/css-loader.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AKAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AN9BA,IAAA,WAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AAAS,OAAA,CAAA,UAAA,GAAA,WAAA,CAAA,UAAA;AAAY,OAAA,CAAA,MAAA,GAAA,WAAA,CAAA,MAAA;;;;;;;;;;;;ACArB,QAAA,CAAA,OAAA,CAAA,eAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;ACAA,MAAA,SAAA,GAAA,YAAA,CAAA,OAAA,CAAA,aAAA,CAAA,CAAA;;AAES,OAAA,CAAA,SAAA,GAAA,SAAA;;AACT,QAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;;;;;;;;;;;;;;;;ACHA,MAAA,KAAA,GAAA,YAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,MAAA,QAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAMA,MAAa,UAAb,SAAgC,KAAK,CAAC,aAAtC,CAAqE;AAC5D,EAAA,MAAM,GAAA;AACX,UAAM,MAAM,GAAG;AACb,MAAA,IAAI,EAAE,QAAA,CAAA,GAAA,CAAI;AACR,QAAA,QAAQ,EAAE,CADF;AAER,QAAA,OAAO,EAAE,EAFD;AAGR,QAAA,eAAe,EAAE;AAAuB;;AAHhC,OAAJ;AADO,KAAf;AAOA,WACE,2BAAS,QAAA,CAAA,GAAA,CAAI,MAAM,CAAC,IAAX,EAAiB,KAAK,KAAL,CAAW,KAA5B,CAAT,EACE,uDADF,CADF;AAKD;;AAdkE;;AAArE,OAAA,CAAA,UAAA,GAAA,UAAA;;;;;;;;;;;;;;;;ACPA,OAAA,CAAA,qBAAA,CAAA;;AACA,MAAA,KAAA,GAAA,YAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,MAAA,QAAA,GAAA,YAAA,CAAA,OAAA,CAAA,WAAA,CAAA,CAAA;;AAEA,MAAA,YAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AAEA,MAAM,EAAE,GAAG,oBAAC,YAAD,CAAC,UAAD,OAAX;AAEA,QAAQ,CAAC,MAAT,CAAgB,EAAhB,EAAoB,QAAQ,CAAC,cAAT,CAAwB,MAAxB,CAApB","file":"renderer.f69400ca.map","sourceRoot":"../..","sourcesContent":["export { IS_BROWSER, IS_DEV } from '@tdb/util/lib/constants';\n","export * from '@tdb/util/lib';\n","import * as constants from './constants';\n\nexport { constants };\nexport * from './libs';\n","import * as React from 'react';\nimport { css, GlamorValue } from '../../common';\n\nexport type IHelloWorldProps = {\n  style?: GlamorValue;\n};\n\nexport class HelloWorld extends React.PureComponent<IHelloWorldProps> {\n  public render() {\n    const styles = {\n      base: css({\n        Absolute: 0,\n        padding: 30,\n        backgroundColor: 'rgba(255, 0, 0, 0.1)' /* RED */,\n      }),\n    };\n    return (\n      <div {...css(styles.base, this.props.style)}>\n        <div>@uiharness/electron</div>\n      </div>\n    );\n  }\n}\n","import './css/normalize.css';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport { HelloWorld } from './screens/HelloWorld';\n\nconst el = <HelloWorld />;\n\nReactDOM.render(el, document.getElementById('root'));\n","var bundleURL = null;\nfunction getBundleURLCached() {\n  if (!bundleURL) {\n    bundleURL = getBundleURL();\n  }\n\n  return bundleURL;\n}\n\nfunction getBundleURL() {\n  // Attempt to find the URL of the current script and use that as the base URL\n  try {\n    throw new Error;\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp):\\/\\/[^)\\n]+/g);\n    if (matches) {\n      return getBaseURL(matches[0]);\n    }\n  }\n\n  return '/';\n}\n\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp):\\/\\/.+)\\/[^/]+$/, '$1') + '/';\n}\n\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\n","var bundle = require('./bundle-url');\n\nfunction updateLink(link) {\n  var newLink = link.cloneNode();\n  newLink.onload = function () {\n    link.remove();\n  };\n  newLink.href = link.href.split('?')[0] + '?' + Date.now();\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\n\nvar cssTimeout = null;\nfunction reloadCSS() {\n  if (cssTimeout) {\n    return;\n  }\n\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n    for (var i = 0; i < links.length; i++) {\n      if (bundle.getBaseURL(links[i].href) === bundle.getBundleURL()) {\n        updateLink(links[i]);\n      }\n    }\n\n    cssTimeout = null;\n  }, 50);\n}\n\nmodule.exports = reloadCSS;\n"]}